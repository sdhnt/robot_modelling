clear all
close all


p02=[0 0]';
p03=[0 0]';
d=1;

% unit vector along x axis in the tip local frame of seg2
p2=[1 0]';
p3=[1 0]';
s1=-pi/8;
s2=-pi/8;
s3=+pi/8;

l1_1=10-s1;
l2_1=10+s1;

l1_2=10+s2;
l2_2=10-s2;

l1_3=10-1.5*s3;
l2_3=10+1.5*s3;


theta1= (l2_1 - l1_1) / (2* d);
[A1, o1]=transcc2D(theta1);
theta2= (l2_2 - l1_2) / (2* d);
[A2, o2]=transcc2D(theta2);
theta3= (l2_3 - l1_3) / (2* d);
[A3, o3]=transcc2D(theta3);
op3= A1*A2*A3*[p03;1];
op2= A1*A2 *[p02;1];
op1= A1  *[0; 0 ;1];
pa= A1*A2*A3*[p3;1];

theta_totala=theta1+theta2+theta3;

    
px0 = pa(1);
py0 = pa(2);

previous_e=0;
Lsegment=10;
%the stiffness of the environment 
K=[2,0;0,2]

%desired force vector applied on the fingertip
fd=[0.5,50]';

%initial force is zero
fe=0;

%set the time interval is 1
dt=1;

%KP proportional gain, KD derivative gain
KP=0.001;

figure(1)

for i=1:500
%%P controller implementation   

e=fd-fe;
dx = -KP*e;

%store the error into an array for display
error(:,i)=e;

%%
    
pv = dx';

%if theta1=0 then l1=const.
%if theta2=0 then l2=const.
%if theta3=0 then l3=const
l1=10;
l2=10;
l3=10;
s1=theta1;
s2=theta2;
s3=theta3;

pxbth1= (2*l1*sin(s1/2)*cos(s1/2)/s1)-(2*l1*sin(s1/2)*sin(s1/2)/(s1*s1))+(l2*sin(s2/2)*sin(s1/2+s2/2)/s2)-(l3*sin(s3/2)*cos(s1/2+s2/2+s3/2)/s3);

pxbth2= (l2*sin(s2/2)*sin(s1/2+s2/2)/s2) - (l2*cos(s2/2)*cos(s1/2+s2/2)/s2) + (2*l2*sin(s2/2)*cos(s1/2+s2/2)/(s2*s2))-(l3*sin(s3/2)*cos(s1/2+s2/2+s3/2)/s3);

pxbth3= -(l3*sin(s3/2)*cos(s1/2+s2/2+s3/2)/s3) - (l3*sin(s1/2+s2/2+s3/2)*cos(s3/2)/s3) + (2*l3*sin(s1/2+s2/2+s3/2)*sin(s3/2)/(s3*s3))

pybth1= -(l1*sin(s1/2)*sin(s1/2)/s1)+(l1*cos(s1/2)*cos(s1/2)/s1)   -  (2*l1*sin(s1/2)*cos(s1/2)/(s1*s1))+  (l2*sin(s2/2)*cos(s1/2+s2/2)/s2)+ (l3*sin(s3/2)*sin(s1/2+s2/2+s3/2)/s3);

pybth2= (l2*sin(s2/2)*cos(s1/2+s2/2)/s2) + (l2*cos(s2/2)*sin(s1/2+s2/2)/s2) - (2*l2*sin(s2/2)*sin(s1/2+s2/2)/(s2*s2))+(l3*sin(s3/2)*sin(s1/2+s2/2+s3/2)/s3);

pybth3= (l3*sin(s3/2)*sin(s1/2+s2/2+s3/2)/s3) - (l3*cos(s1/2+s2/2+s3/2)*cos(s3/2)/s3) + (2*l3*cos(s1/2+s2/2+s3/2)*sin(s3/2)/(s3*s3))

J=[pxbth1 pxbth2 pxbth3;
pybth1 pybth2 pybth3];

Jt= J'*inv(J*J');

dq = Jt*pv';

theta1 = dq(1)+theta1;
theta2 = dq(2)+theta2;
theta3 = dq(3)+theta3;

s1=theta1;
s2=theta2;
s3=theta3;

l1_1=10-s1;
l2_1=10+s1;

l1_2=10+s2;
l2_2=10-s2;

l1_3=10-1.5*s3;
l2_3=10+1.5*s3;

[A1, o1]=transcc2D(theta1);
[A2, o2]=transcc2D(theta2);
[A3, o3]=transcc2D(theta3);

op3= A1*A2*A3*[p03;1];
op2= A1*A2*[p02;1];
op1= A1*[0; 0 ;1];
theta_totala= theta1+theta2+theta3;
pa= A1 * A2  *A3*[p3;1];

PlotThreeSegmentsinverse(theta1,theta2,theta3,op1,op2,op3,Lsegment); hold on;



pxr(i)=pa(1);
pyr(i)=pa(2);
%%simulate the force generated by the displacement
dpx=pxr(i)-px0;
dpy=pxr(i)-py0;

fe=-K*[dpx,dpy]';


plot(pxr,pyr,'k*');
drawnow;
pause(0.01);

end



%error for Jacobian based PD force control
errorfx=error(1,:);
errorfy=error(2,:);


figure(2)
plot(errorfx,'b-')
hold on
plot(errorfy,'r-')
title('force control error','FontSize',14)


